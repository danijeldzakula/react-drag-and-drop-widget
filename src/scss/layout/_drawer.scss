@charset 'utf-8';
@use '../utils/variables' as *;

.drawer {
  position: fixed;
  width: 100%;
  z-index: 1001;
  background-color: $white;
  display: grid;
  grid-template-rows: #{$heightBase * 8} 1fr;
  transition: transform 380ms cubic-bezier(0.4, 0, 0.6, 1);
  will-change: transform;

  &--top,
  &--bottom {
    left: 0;
    right: 0;
    max-height: 320px;
  }

  &--right,
  &--left {
    top: 0;
    bottom: 0;
    max-width: 320px;
    height: 100%;
  }

  &--top {
    top: 0;
    border-bottom: $borderHeightBase solid lighten($color: $officialColor, $amount: $precentBorder);
    transform: translateY(-100%);

    &[aria-hidden='true'] {
      transform: translateY(0%);
    }
  }

  &--bottom {
    bottom: 0;
    border-top: $borderHeightBase solid lighten($color: $officialColor, $amount: $precentBorder);
    transform: translateY(100%);

    &[aria-hidden='true'] {
      transform: translateY(0%);
    }
  }

  &--right {
    right: 0;
    border-left: $borderHeightBase solid lighten($color: $officialColor, $amount: $precentBorder);
    transform: translateX(100%);

    &[aria-hidden='true'] {
      transform: translateX(0%);
    }
  }

  &--left {
    left: 0;
    border-right: $borderHeightBase solid lighten($color: $officialColor, $amount: $precentBorder);
    transform: translateX(-100%);

    &[aria-hidden='true'] {
      transform: translateX(0%);
    }
  }

  & .header {
    position: relative;
    display: grid;
    align-items: center;
    background-color: lighten($color: $officialColor, $amount: $precentOpacity);
    border-bottom: $borderHeightBase solid lighten($color: $officialColor, $amount: $precentBorder);
    height: #{$heightBase * 8};
    background-color: $white;

    & .row {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding-inline: #{$paddingBase * 2};
    }

    & .title {
      line-height: normal;
      font-weight: 300;
      letter-spacing: 0.01em;
      word-spacing: 0.01em;
      color: lighten($color: $officialColor, $amount: $precentTitle);
    }

    & .btn-menu {
      padding: 0;
      width: #{$heightBase * 6};
      height: #{$widthBase * 6};
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: transparent;
      grid-gap: 0;

      & .icon {
        align-items: center;
        justify-content: center;
        color: lighten($color: $officialColor, $amount: $precentIcon);
      }
    }
  }

  // Overlay
  & ~ .overlay {
    position: fixed;
    inset: 0;
    width: 100%;
    height: 100%;
    background-color: rgba($black, 0.25);
    opacity: 0;
    visibility: hidden;
    transition: all 300ms cubic-bezier(0.4, 0, 0.6, 1);
    will-change: opacity, visibility;
    z-index: 997;

    &[aria-hidden='true'] {
      opacity: 1;
      visibility: visible;
    }
  }

  // Absolute
  &.absolute {
    position: absolute;
  }

  // Relative
  &.relative {
    position: relative;
  }
}

[data-theme='dark'] {
  .drawer {
    &--right {
      border-left: $borderHeightBase solid lighten($color: $black, $amount: 30);

      & .header,
      & .main {
        background-color: lighten($color: $black, $amount: 15);
      }

      & .header {
        border-bottom: $borderHeightBase solid lighten($color: $black, $amount: 30);

        & .title {
          color: $white;
        }
      }
    }
  }
}
